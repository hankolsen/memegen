{"mappings":"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","sources":["src/index.js","src/generator.js"],"sourcesContent":["import meow from 'meow';\nimport generator from './generator';\n\nconst main = async () => {\n  const cli = meow(\n    `\n  By default the resulting meme image ends up in your clipboard. Just paste it wherever.\n\n  Usage\n    $ meme <image url>\n    \n    If no image url is given it defaults to Lumbergh.\n\n    Options\n      --toptext, -t Text at the top of the image\n      --bottomtext, -b Text at the bottom of the image\n      --output, -o The location and filename to where to save the png image (if you also want it as a file)\n    \n    Examples\n      $ meme https://imgflip.com/s/meme/One-Does-Not-Simply.jpg -t \"One does not simply\" -b \"create a meme generator\"\n      $ meme -t \"if you could use my meme generator\" -b \"that would be great\"\n      $ meme -b \"That would be great\" -o \"./my-meme.png\"\n    `,\n    {\n      flags: {\n        toptext: {\n          type: 'string',\n          alias: 't',\n        },\n        bottomtext: {\n          type: 'string',\n          alias: 'b',\n        },\n        output: {\n          type: 'string',\n          alias: 'o',\n        },\n      },\n    },\n  );\n\n  const imagePath = cli.input[0];\n  const topText = cli.flags.toptext;\n  const bottomText = cli.flags.bottomtext;\n  const { output } = cli.flags;\n\n  if (!topText && !bottomText) {\n    // eslint-disable-next-line no-console\n    console.log(cli.help);\n    return;\n  }\n\n  generator({ imagePath, topText, bottomText, output });\n};\n\nexport default main;\n","import { createCanvas, loadImage, registerFont } from 'canvas';\nimport { copyImg } from 'img-clipboard';\nimport fs from 'fs';\n\nconst fitText = ({ ctx, x, y, text, fontSize, fromBottom = false }) => {\n  const fontFamily = 'Impact';\n  const lineHeightRatio = 1.5 * (fromBottom ? -1 : 1);\n  const maxWidth = 480;\n  const maxLines = 2;\n  ctx.lineWidth = 2;\n  ctx.strokeStyle = 'black';\n  ctx.mutterLine = 2;\n  ctx.fillStyle = 'white';\n  ctx.textAlign = 'center';\n  ctx.font = `bold ${fontSize}pt ${fontFamily}`;\n  const lineHeight = lineHeightRatio * fontSize;\n  let lines = [];\n  let line = '';\n\n  const words = text.toUpperCase().split(' ');\n  words.forEach((word) => {\n    const testLine = line ? `${line} ${word}` : word;\n    const metrics = ctx.measureText(testLine);\n    const testWidth = metrics.width;\n    if (testWidth > maxWidth) {\n      lines = fromBottom ? [line, ...lines] : [...lines, line];\n      line = word;\n    } else {\n      line = testLine;\n    }\n  });\n  lines = fromBottom ? [line, ...lines] : [...lines, line];\n\n  if (lines.length > maxLines) {\n    fitText({ ctx, x, y, fontSize: fontSize - 5, text, fromBottom });\n  } else {\n    lines.forEach((l, i) => {\n      ctx.strokeText(l, x, y + lineHeight * i);\n      ctx.fillText(l, x, y + lineHeight * i);\n    });\n  }\n};\n\nconst writeMeme = (canvas, output) => {\n  const stream = canvas.createPNGStream();\n  const out = fs.createWriteStream(output);\n  stream.pipe(out);\n  out.on('finish', () =>\n    // eslint-disable-next-line no-console\n    console.log(`...and your image is available as ${output}`),\n  );\n};\n\nconst getCanvas = ({ width, image }) => {\n  const canvasHeight = (image.height / image.width) * width;\n  registerFont(`${__dirname}/assets/fonts/impact.ttf`, { family: 'Impact' });\n  const canvas = createCanvas(width, canvasHeight);\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, width, canvasHeight);\n  ctx.drawImage(image, 0, 0, width, canvasHeight);\n  return { canvas, height: canvasHeight };\n};\n\nconst writeText = ({ canvas, width, height, topText, bottomText }) => {\n  const x = width / 2;\n  const y = 10;\n  const fontSize = 23;\n  const ctx = canvas.getContext('2d');\n\n  ctx.textBaseline = 'top';\n  fitText({ ctx, x, y, text: topText, fontSize });\n\n  ctx.textBaseline = 'bottom';\n  fitText({\n    ctx,\n    x,\n    y: height - y / 2,\n    text: bottomText,\n    fontSize,\n    fromBottom: true,\n  });\n};\n\nconst generator = async ({\n  width = 500,\n  imagePath = `${__dirname}/assets/images/That-Would-Be-Great.jpg`,\n  topText = '',\n  bottomText = '',\n  output = '',\n} = {}) => {\n  const image = await loadImage(imagePath);\n  const { canvas, height } = getCanvas({ width, image });\n  writeText({\n    canvas,\n    width,\n    height,\n    topText,\n    bottomText,\n  });\n  copyImg(Buffer.from(canvas.toBuffer(), 'base64'));\n  if (output) {\n    writeMeme(canvas, output);\n  }\n  // eslint-disable-next-line no-console\n  console.log(\n    'Done! Just paste the content of your clipboard wherever you want the image',\n  );\n};\n\nexport default generator;\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}